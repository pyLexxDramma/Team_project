
import json
import requests
from io import BytesIO
from PIL import Image
import json
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import sys
import vk_api

from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))  # –ü—É—Ç—å –¥–æ –ø–∞–ø–∫–∏ project
# –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ:
from bot.bot import calculate_age


def create_keyboard_start():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å".
    Returns:
        dict: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è VK API.
    """
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button("–ù–∞—á–∞—Ç—å", color=VkKeyboardColor.PRIMARY)
    return keyboard.get_keyboard()

def create_keyboard_city():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞.
    Returns:
        dict: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è VK API.
    """
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button("–ú–æ—Å–∫–≤–∞")
    keyboard.add_button("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    keyboard.add_line()
    keyboard.add_button("–ò–∂–µ–≤—Å–∫")
    keyboard.add_button("–î—Ä—É–≥–æ–π")
    return keyboard.get_keyboard()

def create_keyboard_sex():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–∞.
    Returns:
        dict: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è VK API.
    """
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button("–ñ–µ–Ω—Å–∫–∏–π")
    keyboard.add_button("–ú—É–∂—Å–∫–æ–π")
    keyboard.add_line()
    keyboard.add_button("–ù–µ –≤–∞–∂–Ω–æ")
    return keyboard.get_keyboard()

def create_keyboard_next_fav_black():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞–ª—å—à–µ", "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", "–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫".
    Returns:
        dict: –ì–æ—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è VK API.
    """
    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button("–î–∞–ª—å—à–µ", color=VkKeyboardColor.PRIMARY)
    keyboard.add_button("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", color=VkKeyboardColor.POSITIVE)
    keyboard.add_line()
    keyboard.add_button("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", color=VkKeyboardColor.NEGATIVE)
    return keyboard.get_keyboard()


def create_carousel_from_users(users_list, vk):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–æ—Ç–æ"""
    carousel_elements = []
    
    for user in users_list:
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            user_id = user.get('id')
            first_name = user.get('first_name', '')
            last_name = user.get('last_name', '')
            age = calculate_age(user.get('bdate', '')) if user.get('bdate') else None
            city = user.get('city', {}).get('title', '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            photo_id = None
            if user.get('crop_photo') and user['crop_photo'].get('photo'):
                photo = user['crop_photo']['photo']
                
                # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ —Å –æ–±—Ä–µ–∑–∫–æ–π
                try:
                    photo_id = f"{photo['owner_id']}_{photo['id']}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ API
                    photo_info = vk.photos.getById(photos=photo_id)
                    if not photo_info:
                        photo_id = None
                except:
                    photo_id = None
                
                # 2. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if not photo_id:
                    try:
                        # –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        best_size = max(
                            [s for s in photo['sizes'] if s['type'] in ['x', 'y', 'z']],
                            key=lambda x: x['width'] * x['height'],
                            default=None
                        )
                        
                        if best_size:
                            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            response = requests.get(best_size['url'])
                            img = Image.open(BytesIO(response.content))
                            
                            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è 13:8
                            width, height = img.size
                            target_ratio = 13/8
                            
                            if width/height > target_ratio:
                                # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
                                new_width = int(height * target_ratio)
                                left = (width - new_width) // 2
                                img = img.crop((left, 0, left + new_width, height))
                            else:
                                # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                                new_height = int(width / target_ratio)
                                top = (height - new_height) // 2
                                img = img.crop((0, top, width, top + new_height))
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            temp_img = BytesIO()
                            img.save(temp_img, format='JPEG')
                            temp_img.seek(0)
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK
                            upload_url = vk.photos.getMessagesUploadServer()['upload_url']
                            response = requests.post(upload_url, files={'photo': temp_img}).json()
                            save_result = vk.photos.saveMessagesPhoto(
                                photo=response['photo'],
                                server=response['server'],
                                hash=response['hash']
                            )
                            
                            photo_id = f"{save_result[0]['owner_id']}_{save_result[0]['id']}"
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—É—Å–µ–ª–∏
            element = {
                "title": f"{first_name} {last_name}"[:80],
                "description": f"{age} –ª–µ—Ç, {city}"[:80] if age else city[:80],
                "buttons": [
                    {
                        "action": {
                            "type": "text",
                            "label": "‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                            "payload": json.dumps({"type": "add_favorite", "user_id": user_id})
                        }
                    },
                    {
                        "action": {
                            "type": "open_link",
                            "label": "üîç –ü—Ä–æ—Ñ–∏–ª—å",
                            "link": f"https://vk.com/id{user_id}"
                        }
                    },
                    {
                        "action": {
                            "type": "text",
                            "label": "üö´ –í –ß–°",
                            "payload": json.dumps({"type": "add_blacklist", "user_id": user_id})
                        }
                    }
                ],
                "action": {
                    "type": "open_link",
                    "link": f"https://vk.com/id{user_id}"
                }
            }
            
            if photo_id:
                element["photo_id"] = photo_id
            
            carousel_elements.append(element)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            continue
    
    return {
        "type": "carousel",
        "elements": carousel_elements[:10]
    }

